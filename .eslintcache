[{"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\index.tsx":"1","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reportWebVitals.ts":"2","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\App.tsx":"3","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reducers\\index.ts":"4","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reducers\\settingReducer.ts":"5","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\components\\login.tsx":"6","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\actions\\index.ts":"7","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\api\\index.ts":"8","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\components\\grid.tsx":"9","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reducers\\tradeViewReducer.ts":"10","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\utils\\appUtils.ts":"11","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\sagas\\index.ts":"12","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\sagas\\tradeSagas.ts":"13","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\actions\\entityActions.ts":"14","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\sagas\\generics.ts":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1135,"mtime":1607965278879,"results":"19","hashOfConfig":"17"},{"size":265,"mtime":1607920732540,"results":"20","hashOfConfig":"17"},{"size":869,"mtime":1607912943604,"results":"21","hashOfConfig":"17"},{"size":4109,"mtime":1607916174103,"results":"22","hashOfConfig":"17"},{"size":426,"mtime":1607972837808,"results":"23","hashOfConfig":"17"},{"size":1616,"mtime":1607957992036,"results":"24","hashOfConfig":"17"},{"size":3579,"mtime":1607963994114,"results":"25","hashOfConfig":"17"},{"size":1895,"mtime":1607971003444,"results":"26","hashOfConfig":"17"},{"size":286,"mtime":1607957265168,"results":"27","hashOfConfig":"17"},{"size":676,"mtime":1607971206997,"results":"28","hashOfConfig":"17"},{"size":1127,"mtime":1607971034965,"results":"29","hashOfConfig":"17"},{"size":799,"mtime":1607970986446,"results":"30","hashOfConfig":"17"},{"size":511,"mtime":1607958877921,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"121f9mv",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\index.tsx",[],["69","70"],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reportWebVitals.ts",[],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\App.tsx",["71"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport reducers from './reducers';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux';\nimport { logger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport Login from './components/login';\nimport Grid from './components/grid';\nimport rootSaga from './sagas';\n\nclass App extends React.Component{\n  store: any;\n  constructor(props: any) {\n    super(props);\n    const sagaMiddleware = createSagaMiddleware()\n    this.store = createStore(\n      reducers,\n      applyMiddleware(sagaMiddleware, logger)\n      )\n      debugger;\n      sagaMiddleware.run(rootSaga);\n  }\n  render(){\n    return (\n      <Provider store={this.store}>\n        <Router basename={process.env.REACT_APP_BASENAME}>\n            <Switch>\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/home\" component={Grid} />\n            </Switch>\n        </Router>\n      </Provider>\n\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reducers\\index.ts",[],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reducers\\settingReducer.ts",[],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\components\\login.tsx",["72"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {isLoggedIn} from '../actions';\r\nimport {login} from '../api';\r\n\r\ninterface IState {\r\n    username: string;\r\n    password: string;\r\n    isLoading: boolean;\r\n    errMessage: string;\r\n  }\r\n  \r\n  interface IProps {\r\n    history: any\r\n  }\r\n  \r\n  interface MapStateToProps {\r\n    navigation: any;\r\n    isLoggedIn: boolean;\r\n  }\r\n   \r\n  interface MapDispatchToProps {\r\n    setIsLoggedIn: (params: any) => {}\r\n  }\r\n\r\n  class Login extends Component<IProps & MapDispatchToProps & MapStateToProps, IState> {\r\n    state = {\r\n      username: '',\r\n      password: '',\r\n      isLoading: false,\r\n      errMessage: ''\r\n    }\r\n\r\n    onChange = (e: any, item: string) => {\r\n        const { value } = e.target;\r\n        this.setState({\r\n          // Yuan: why do we need this.state here? Is it because we pass in state as Interface?\r\n          ...this.state,\r\n          [item]: value\r\n        })\r\n      }\r\n    \r\n    componentDidMount = () => {\r\n        debugger;\r\n        const { history, isLoggedIn } = this.props;\r\n        if(isLoggedIn) {\r\n            history.push('./home');\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e: any) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n          isLoading: true\r\n        })\r\n        const { history, setIsLoggedIn } = this.props;\r\n        const { username, password } = this.state;\r\n        login(username, password).then((response: any) => {\r\n          \r\n          const { grantedAauthorities, tokens } = response.data;\r\n          const { accessTokenExpiresIn } = tokens;\r\n          /**\r\n           * Yuan:\r\n           * The filter() method creates a new array with all elements that pass the test implemented by the provided function.\r\n           */\r\n          const screens = grantedAauthorities.filter((authority: any) => authority.authorityScope === 'SCREEN');\r\n          debugger;\r\n          screens.push({\r\n            authorityName: 'Dashboard',\r\n            moduleDisplayName: 'Dashboard',\r\n            authorizations: [\r\n              {\r\n                screenName: 'Dashboard',\r\n                screenKey: 'dashboard'\r\n              }\r\n            ]\r\n          })\r\n    \r\n          /**\r\n           * Yuan:\r\n           * setItem: set value in localStorage, keep it for future authentication\r\n           */\r\n          localStorage.setItem('navigation', JSON.stringify(screens))\r\n          localStorage.setItem('tokens', JSON.stringify(tokens))\r\n          localStorage.setItem('expiryTime', `${new Date().getTime() + (accessTokenExpiresIn - 60000)}`);\r\n    \r\n          // Yuan: why do we need setIsLoggedIn here? We have already had isLoggedIn indicating whether the user is successfully logged in\r\n          setIsLoggedIn({ isLoggedIn: true })\r\n          history.push('./home');\r\n          \r\n        }).catch(err => {\r\n          this.setState({\r\n            errMessage: err.response?.data?.message,\r\n            isLoading: false\r\n          });\r\n        })\r\n      }\r\n      \r\n      render() {\r\n        const { username, password, isLoading, errMessage } = this.state;\r\n        debugger;\r\n        return(\r\n            <div>\r\n            <h1>Login</h1>\r\n              <form onSubmit={this.handleSubmit} method=\"post\">\r\n                <label>User Name</label>\r\n                <input className=\"input\" type=\"text\" value={username} onChange={(e) => this.onChange(e, 'username')}/>\r\n                \r\n                <label>Password</label>\r\n                <input className=\"input\" type=\"password\" value={password} onChange={(e) => this.onChange(e, 'password')}/>\r\n              \r\n                <button onSubmit={this.handleSubmit}>Log in</button>\r\n              </form>\r\n              {errMessage && <p>{errMessage}</p>}\r\n            </div>\r\n        )\r\n      }\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    isLoggedIn: state.isLoggedIn\r\n  })\r\n  \r\n  const mapDispatchToProps: MapDispatchToProps  = {\r\n    // change the name of isLoggedIn to setIsLoggedIn\r\n    setIsLoggedIn: isLoggedIn\r\n  };\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Login);","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\actions\\index.ts",["73"],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\api\\index.ts",["74"],"import axios from 'axios';\r\n\r\nconst getToken = (token: string, addBearer: boolean) => {\r\n  const tokens = localStorage.getItem('tokens');\r\n  const tokenValue = JSON.parse(tokens || '')[token];\r\n  debugger;\r\n  return addBearer ? `Bearer ${tokenValue}` : tokenValue;\r\n}\r\n\r\nconst BASE_URL = process.env.REACT_APP_BASE_URL || 'https://hydra.transcendstreet.com:8768';\r\n\r\nconst nonAuthorizedHeader = {\r\n    'Content-Type': 'application/json'\r\n   }\r\n  \r\nexport const login = (userId: string, password: string) => {\r\nconst data = {\r\n    userId,\r\n    password\r\n}\r\n\r\nreturn axios.post(\r\n    `${BASE_URL}/auth-service/v3/valid_user`, data, {\r\n    headers: nonAuthorizedHeader\r\n    })\r\n}\r\n\r\nexport const getQueryId = (queryName: string) => {\r\n    const data = {\r\n      queryName,\r\n      \"filter\": {\r\n        \"simpleExpressions\": [\r\n          {\r\n            \"columnName\": \"BusinessDate\",\r\n            \"operator\": \"EQUALS\",\r\n            \"values\": [\"1590192000000\"]\r\n          }   \r\n        ]\r\n      }\r\n    }\r\n    debugger;\r\n    return axios({\r\n      url: `${BASE_URL}/realtime-svc/create-query`,\r\n      method: 'post',\r\n      data,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n  }\r\n\r\nexport const getMetadata = (queryName: string) => {\r\n    const requestBody = {\r\n        data: {\r\n        queryName,\r\n        metadataType: 'UI'\r\n        }\r\n    }\r\n    debugger;\r\n    return axios ({\r\n        url: `${BASE_URL}/metadata_service/ui_metadata`,\r\n        method: 'post',\r\n        data: JSON.stringify(requestBody),\r\n        headers: {\r\n        'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\components\\grid.tsx",["75","76","77"],"import React, { useState, useEffect } from 'react';\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {getQueryId} from '../api';\r\nimport {getTradeMetadata} from '../actions';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\n\r\n\r\ninterface MapDispatchToProps {\r\n  getTradeMetadata: (destinationObject: any) => any;\r\n }\r\n\r\ninterface MapStateToProps {\r\n  metadata: any;\r\n  rowData: any;\r\n  groupedColumns: any[];\r\n  aggColumns: any[];\r\n  isPivot: boolean;\r\n  loading: boolean;\r\n  pivotColumns: any[];\r\n  isApplyFilters: boolean;\r\n  selectedFilterValuesByColumn: any;\r\n  lastGridRequest: any;\r\n  dataTypesMap: any;\r\n  pinnedBottomRow: any;\r\n  pinnedTopRowDataById: any;\r\n  theme: string;\r\n  searchText: string;\r\n  savingViewName: string;\r\n  selectedViewName: string;\r\n  isCondensedView: boolean;\r\n  updatedIds: string[];\r\n}\r\n\r\ninterface IProps {\r\n  destinationObject: string;\r\n  screenName: string;\r\n  openDetailScreen: (params: any) => void;\r\n}\r\n\r\ninterface MapStateToProps {\r\n  metadata: any;\r\n  rowData: any;\r\n  groupedColumns: any[];\r\n  aggColumns: any[];\r\n  isPivot: boolean;\r\n  loading: boolean;\r\n  pivotColumns: any[];\r\n  isApplyFilters: boolean;\r\n  selectedFilterValuesByColumn: any;\r\n  lastGridRequest: any;\r\n  dataTypesMap: any;\r\n  pinnedBottomRow: any;\r\n  pinnedTopRowDataById: any;\r\n  theme: string;\r\n  searchText: string;\r\n  savingViewName: string;\r\n  selectedViewName: string;\r\n  isCondensedView: boolean;\r\n  updatedIds: string[];\r\n}\r\n\r\nclass Grid extends React.Component<IProps & MapStateToProps & MapDispatchToProps, MapStateToProps>  {\r\n    // Get trade meta data\r\n    componentDidMount(){\r\n      getTradeMetadata({destinationObject: \"TradeView\"});\r\n      debugger;\r\n    }\r\n    render(){\r\n\r\n      return (\r\n        <div className=\"ag-theme-alpine\" style={ { height: 400, width: 600 } }>\r\n          {/* <button onClick={onButtonClick}>Get selected rows</button> */}\r\n      <AgGridReact\r\n          rowSelection=\"multiple\"\r\n         groupSelectsChildren={true}\r\n         autoGroupColumnDef={{\r\n             headerName: \"Model\",\r\n             field: \"model\",\r\n             cellRenderer:'agGroupCellRenderer',\r\n             cellRendererParams: {\r\n                 checkbox: true\r\n             }\r\n         }}>\r\n              <AgGridColumn field=\"make\" sortable={true} filter={true} checkboxSelection={true} ></AgGridColumn>\r\n              <AgGridColumn field=\"model\" sortable={true} filter={true} ></AgGridColumn>\r\n              <AgGridColumn field=\"price\" sortable={true} filter={true} ></AgGridColumn>\r\n          </AgGridReact>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchToProps  = {\r\n  getTradeMetadata,\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  metadata: state.tradeViewContainer.tradeViewMetadata,\r\n  rowData: state.tradeViewContainer.tradeViewData,\r\n  groupedColumns: state.tradeViewContainer.groupedColumns,\r\n  isPivot: state.tradeViewContainer.isPivot,\r\n  loading: state.tradeViewContainer.loading,\r\n  pivotColumns: state.tradeViewContainer.pivotColumns,\r\n  isApplyFilters: state.tradeViewContainer.isApplyFilters,\r\n  selectedFilterValuesByColumn: state.tradeViewContainer.selectedFilterValuesByColumn,\r\n  lastGridRequest: state.tradeViewContainer.lastGridRequest,\r\n  dataTypesMap: state.tradeViewContainer.dataTypesMap,\r\n  pinnedBottomRow: state.tradeViewContainer.pinnedBottomRow\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\reducers\\tradeViewReducer.ts",[],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\utils\\appUtils.ts",[],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\sagas\\index.ts",["78","79","80","81"],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\sagas\\tradeSagas.ts",["82"],"import { tradeMetaDataFetch } from '../actions/entityActions'\r\nimport {fetchEntity} from './generics';\r\nimport * as api from '../api';\r\n\r\nexport function* fetchTradeMetaData(action: any) {\r\n  const { destinationObject } = action.payload;\r\n  debugger;\r\n  const response = yield fetchEntity(\r\n    tradeMetaDataFetch,\r\n    api.getMetadata,\r\n    [destinationObject],\r\n    action\r\n  );\r\n}\r\n\r\n// export function* fetchTradeData(action: any) {\r\n//   const { request } = action.payload;\r\n//   const response = yield fetchEntity(\r\n//     tradeDataFetch,\r\n//     api.getItems,\r\n//     [request],\r\n//     action\r\n//   );\r\n// }\r\n\r\n// export function* fetchTradeFilterColumnValues(action: any) {\r\n//   const { columnNames, destinationObject } = action.payload;\r\n//   const body = {\r\n//     \"queryName\": destinationObject,\r\n//     columnNames,\r\n//     \"aggregateColumnNames\": [\r\n//       {\r\n//         \"columnName\": columnNames[0],\r\n//         \"aggregationType\": \"COUNT\"\r\n//       }\r\n//     ]\r\n//   }\r\n//   const response = yield fetchEntity(\r\n//     setTradeFilterValues,\r\n//     api.getItems,\r\n//     [body],\r\n//     action\r\n//   )\r\n// }\r\n","C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\actions\\entityActions.ts",[],"C:\\Users\\YuanZhao\\ag-grid-ts-react\\src\\sagas\\generics.ts",["83"],"import { put, apply, call } from 'redux-saga/effects';\r\n\r\nexport function* fetchEntity(entity: any, apiFn: any, body: any, action: any) {\r\n  const initialActionPayload = action.payload;\r\n  const {data: response, status} = yield apply(null, apiFn, [...body]);\r\n  let error;\r\n  debugger;\r\n  if(status === 200) {\r\n    yield put(entity.success(response.data, initialActionPayload));\r\n  } else {\r\n    error = 'Oops! pleae try again later. '\r\n    yield put(entity.failure(error));\r\n  }\r\n  return { response, error}\r\n}",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":12},{"ruleId":"88","severity":1,"message":"92","line":100,"column":37,"nodeType":"90","messageId":"91","endLine":100,"endColumn":46},{"ruleId":"88","severity":1,"message":"93","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":18},{"ruleId":"88","severity":1,"message":"94","line":3,"column":7,"nodeType":"90","messageId":"91","endLine":3,"endColumn":15},{"ruleId":"88","severity":1,"message":"95","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"96","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"97","line":5,"column":9,"nodeType":"90","messageId":"91","endLine":5,"endColumn":19},{"ruleId":"88","severity":1,"message":"98","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":14},{"ruleId":"88","severity":1,"message":"99","line":1,"column":16,"nodeType":"90","messageId":"91","endLine":1,"endColumn":19},{"ruleId":"88","severity":1,"message":"100","line":1,"column":21,"nodeType":"90","messageId":"91","endLine":1,"endColumn":31},{"ruleId":"88","severity":1,"message":"101","line":3,"column":9,"nodeType":"90","messageId":"91","endLine":3,"endColumn":30},{"ruleId":"88","severity":1,"message":"102","line":8,"column":9,"nodeType":"90","messageId":"91","endLine":8,"endColumn":17},{"ruleId":"88","severity":1,"message":"103","line":1,"column":22,"nodeType":"90","messageId":"91","endLine":1,"endColumn":26},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'Dispatch' is defined but never used.","'getToken' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'getQueryId' is defined but never used.","'fork' is defined but never used.","'put' is defined but never used.","'takeLatest' is defined but never used.","'FETCH_TRADE_META_DATA' is defined but never used.","'response' is assigned a value but never used.","'call' is defined but never used.","no-global-assign","no-unsafe-negation"]